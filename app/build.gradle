apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
File signPropertiesFile = file('../buildSystem/keystore.properties')
android {
    signingConfigs {
        release {
            storeFile file('${rootDir}\\buildSystem\\ar110.keystore')
            storePassword '123456'
            keyAlias = 'ar110alias'
            keyPassword '123456'
        }
        local {
        }
    }
    compileSdkVersion rootProject.compileSdkVersion
    buildToolsVersion rootProject.buildToolsVersion

    defaultConfig {
        applicationId "com.hiar.ar110"
        minSdkVersion rootProject.minSdkVersion
        targetSdkVersion rootProject.targetSdkVersion
        versionCode 217
        versionName "2.1.1-beta1"
        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
        ndk {
            //设置支持的SO库架构a
            abiFilters "armeabi-v7a"
        }
    }

    if (signPropertiesFile.exists()) {
        Properties properties = new Properties()
        properties.load(new FileInputStream(signPropertiesFile))
        signingConfigs {
            release {
                storeFile file(properties['keystore'])
                storePassword properties['storePassword']
                keyAlias properties['keyAlias']
                keyPassword properties['keyPassword']
            }
        }
    }

    buildTypes {
        debug {
            manifestPlaceholders = [
                    ENTRY_ACTION  : "android.intent.action.MAIN",
                    ENTRY_CATEGORY: "android.intent.category.LAUNCHER",
                    build_time_current: currentDetailTime()
            ]
        }

        release {
            signingConfig signingConfigs.release
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-android.pro'
            manifestPlaceholders = [
                    ENTRY_ACTION  : "pstore.intent.action.MAIN",
                    ENTRY_CATEGORY: "pstore.intent.category.APP",
                    build_time_current: currentDetailTime()
            ]
        }
    }
    flavorDimensions "default"
    productFlavors {
        intranet_dev {
            buildConfigField "String", "COMPILE", "\"INTERNAL_DEVELOP\""
        }
        intranet {
            buildConfigField "String", "COMPILE", "\"DEBUG_INTERNAL_NEW\""
        }
        extranet {
            buildConfigField "String", "COMPILE", "\"HISCENE_EXTERNAL\""
        }
        police_dev {
            buildConfigField "String", "COMPILE", "\"POLICE_DEVELOP\""
        }
        police_production {
            buildConfigField "String", "COMPILE", "\"POLICE_PRODUCTION\""
        }
        zhaotong {
            buildConfigField "String", "COMPILE", "\"ZHAOTONG\""
        }
    }
    configurations {
        intranet_devDebugImplementation
        intranetDebugImplementation
        extranetDebugImplementation
        police_devImplementation
        police_productionImplementation
        zhaotongImplementation
    }

    compileOptions {
        sourceCompatibility rootProject.javaSourceCompatibility
        targetCompatibility rootProject.javaTargetCompatibility
    }

    repositories {
        flatDir {
            dirs 'libs'
        }
    }

    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
        }
    }

    // apk 命名
    applicationVariants.all { variant ->
        variant.outputs.all {
            print('variant name: ' + variant.name)
            def suffix = '内网测试'
            switch (variant.name) {
                case 'intranet_devDebug':
                    suffix = '内网开发'
                    break
                case 'intranetDebug':
                    suffix = '内网测试'
                    break
                case 'extranetDebug':
                    suffix = '公网演示'
                    break
                case 'police_devRelease':
                    suffix = '公安网测试'
                    break
                case 'police_productionRelease':
                    suffix = '公安网正式'
                    break
                case 'zhaotongDebug':
                    suffix = "昭通Debug"
                    break
                case 'zhaotongRelease':
                    suffix = "昭通Releas"
                    break
                default:
                    break
            }
            if (outputFileName.endsWith('.apk')) {
                outputFileName = "AR110_V${defaultConfig.versionName}_${getCurrentTime()}_${suffix}.apk"
            }
        }
    }

    //过滤掉无用的 build variant 组合
    android.variantFilter { variant ->
        if (variant.buildType.name == 'release') {
            variant.getFlavors().each() { flavor ->
                if (flavor.name == 'intranet_dev'||flavor.name == 'intranet' || flavor.name == 'extranet') {
                    variant.setIgnore(true)
                }
            }
        } else {
            variant.getFlavors().each() { flavor ->
                if (flavor.name == 'police_dev' || flavor.name == 'police_production') {
                    variant.setIgnore(true)
                }
            }
        }
    }
}

def static getCurrentTime() {
    return new Date().format("yyyyMMdd", TimeZone.getTimeZone("UTC"))
}
def currentDetailTime() {
    Date date = new Date();
    String dates = date.format("yyyy-MM-dd HH:mm:ss", TimeZone.getTimeZone("Asia/Shanghai"));
    return dates;
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation files('libs\\glasssdk_v0.1.3.jar')
    testImplementation 'junit:junit:4.12'
    androidTestImplementation('androidx.test.espresso:espresso-core:3.1.0', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })

    implementation "com.github.CymChad:BaseRecyclerViewAdapterHelper:2.9.30"
    implementation files('libs/pstore-sdk-pstore-2.5.8-release.jar')
    implementation files('libs/hiar_mqtt_client.aar')
//    implementation 'org.xutils:xutils:3.5.0'
    // 人脸检测--上海自研
    implementation project(path: ':hisceneface')
    // 车牌检测--文通
    implementation project(path: ':wintoneLPR')
    // 车牌检测--广州自研
    if (isHisceneLPRLib) {
        implementation project(path: ':hisceneLPR')
    }
    implementation 'com.blankj:utilcodex:1.29.0'
    implementation 'com.github.bumptech.glide:glide:3.7.0'
    implementation project(':usbCameraCommon')
    implementation 'com.google.code.gson:gson:2.8.6'
    implementation files('libs/apache-jakarta-oro-2.0.8.jar')
    implementation files('libs/org.apache.commons.net-1.4.1.jar')
    implementation project(path: ':mybaselib')
    implementation project(path: ':mediaengine')
    implementation project(path: ':tagmodule')
    implementation project(path: ':imui')
    implementation 'com.tencent.bugly:crashreport:3.4.4'
    implementation 'com.tencent.bugly:nativecrashreport:3.9.2'

    //  network
    implementation 'com.squareup.retrofit2:retrofit:2.9.0'
    implementation 'com.squareup.retrofit2:converter-moshi:2.4.0'
    implementation 'com.squareup.moshi:moshi-kotlin:1.7.0'
    implementation 'com.squareup.okhttp3:okhttp:4.6.0'
    implementation 'com.squareup.okhttp3:logging-interceptor:4.2.2'

    // Koin for Android
    implementation 'org.koin:koin-core:2.1.6'
    implementation 'org.koin:koin-android:2.1.6'
    implementation 'org.koin:koin-androidx-scope:2.1.6'
    implementation 'org.koin:koin-androidx-viewmodel:2.1.6'
    implementation 'org.koin:koin-android-scope:2.1.6'
    implementation 'org.koin:koin-android-viewmodel:2.1.6'

    implementation 'jp.wasabeef:recyclerview-animators:4.0.2'

    // 屏幕适配
    implementation 'me.jessyan:autosize:1.2.1'
    // debug
    intranet_devDebugImplementation 'com.squareup.leakcanary:leakcanary-android:2.5'
    intranet_devDebugImplementation 'com.glance.guolindev:glance:1.0.0'
}
repositories {
    mavenCentral()
}
